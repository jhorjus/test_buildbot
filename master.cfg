# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# Buildmaster config file - accessed remotely by the master docker container
# via a URL configured in docker compose and gets placed in the buildmaster
# base directory.

# Dictionary that the buildmaster pays attention to + shorter alias.
c = BuildmasterConfig = {}


####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
# (eventually will need a worker for each platform)

c['workers'] = [worker.Worker("rebel-linux-worker", 'pass')]

# Some boilerplate code (mq = message queue)
if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }

# 'protocols' which master will use for communicating with workers.
# Defining 'port' is manditory and must match the value configured into the
# workers (with their --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how
# to find out about source code changes.

c['change_source'] = []

# This one would poll for changes comitted on the master branch.
c['change_source'].append(changes.GitPoller(
        'http://github.com/RebelBrowser/rebel.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300,
        category="release"
))

# This one should poll for pull requests targetting the master branch.
c['change_source'].append(changes.GitHubPullrequestPoller(
        owner="ReebelBrowser",
        repo="rebel",
        branches="master",
        pollAtLaunch=True,
        category="trybot"
))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'linux_trybot' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["linux_trybot"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["linux_trybot"]))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.
#

linux_factory = util.BuildFactory()

# Use factory.addStep to define all additional commands needed to get a builder ready to build.
# ***This might not be the riht place to

# 1.) Get depot tools checkout. (ACTUALLY THIS SHOULD BE IN THE IMAGE.)
# linux_factory.addStep(steps.Git(
#    repourl='https://chromium.googlesource.com/chromium/tools/depot_tools.git',
#    mode='incremental',
#    shallow=True,
#    progress=True
#))

# 1.1.) Add depot tools to the path...?
# MORE BUILD STEPS HERE - highly dependant on the base image being used for the builder!

# 2.) Run rebel code checkout.
linux_factory.addStep(steps.Git(
    repourl='git://github.com/RebelBrowser/rebel.git',
    mode='incremental',
    shallow=True,
    progress=True
))

# MORE BUILD STEPS HERE - highly dependant on the base image being used for the builder!
#linux_factory.addStep(steps.ShellCommand(
#    command=["", ""]
#))


c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="linux_trybot",
      workernames=["rebel-linux-worker"],
      factory=linux_factory))


# MORE BUILDERS HERE FOR OTHER PLATFORMS


####### REPORTER TARGETS

# 'services' is a list of Reporter Targets. The results of each build will be
# pushed to these targets. buildbot/reporters/*.py has a variety to choose from,
# like IRC bots.

c['services'] = []


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Rebel Browser"
c['titleURL'] = "https://github.com/RebelBrowser/rebel"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))


####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
